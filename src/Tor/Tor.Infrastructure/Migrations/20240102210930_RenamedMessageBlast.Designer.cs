// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tor.Infrastructure.Persistence;

#nullable disable

namespace Tor.Infrastructure.Migrations
{
    [DbContext(typeof(TorDbContext))]
    [Migration("20240102210930_RenamedMessageBlast")]
    partial class RenamedMessageBlast
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusinessCategory", b =>
                {
                    b.Property<Guid>("BusinessesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.HasKey("BusinessesId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BusinessCategory");
                });

            modelBuilder.Entity("ClientNotification", b =>
                {
                    b.Property<Guid>("ClientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotificationsId")
                        .HasColumnType("uuid");

                    b.HasKey("ClientsId", "NotificationsId");

                    b.HasIndex("NotificationsId");

                    b.ToTable("ClientNotification");
                });

            modelBuilder.Entity("ClientWaitingList", b =>
                {
                    b.Property<Guid>("ClientsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaitingListsId")
                        .HasColumnType("uuid");

                    b.HasKey("ClientsId", "WaitingListsId");

                    b.HasIndex("WaitingListsId");

                    b.ToTable("ClientWaitingList");
                });

            modelBuilder.Entity("Tor.Domain.AppointmentAggregate.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ScheduledFor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StaffMemberId")
                        .HasColumnType("uuid");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("StaffMemberId");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("Tor.Domain.BusinessAggregate.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HomepageNote")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("InvitationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPaymentMandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("MaximumTravelDistance")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InvitationId")
                        .IsUnique();

                    b.HasIndex("TierId");

                    b.ToTable("Businesses", (string)null);
                });

            modelBuilder.Entity("Tor.Domain.BusinessAggregate.Entities.BusinessClient", b =>
                {
                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.HasKey("BusinessId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("BusinessClients");
                });

            modelBuilder.Entity("Tor.Domain.BusinessAggregate.Entities.GiftcardPreset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ShelfLife")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("ValidSincePurchase")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("GiftcardPresets", (string)null);
                });

            modelBuilder.Entity("Tor.Domain.BusinessAggregate.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsPaymentMandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<short>("Location")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("StaffMemberId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StaffMemberId");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("Tor.Domain.BusinessAggregate.Entities.StaffMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short>("Position")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StaffMembers", (string)null);
                });

            modelBuilder.Entity("Tor.Domain.CategoryAggregate.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("208c5853-b795-4b54-95aa-0dfb615a4843"),
                            DisplayName = "מספרה",
                            Name = "Barbershop",
                            Type = (short)1,
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("48ca5438-3987-4cbf-ba8a-b736a17bfc9a"),
                            DisplayName = "ציפורניים",
                            Name = "NailSalon",
                            Type = (short)2,
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("50f9c731-29e5-490f-86a3-e4fff61b3160"),
                            DisplayName = "שיער",
                            Name = "HairSalon",
                            Type = (short)3,
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("7cd54324-407a-4876-beb1-f3d7d68d10a2"),
                            DisplayName = "עיסוי ורפואה משלימה",
                            Name = "Massage",
                            Type = (short)4,
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("abe0f760-2cb1-426e-96aa-a202ed13a6df"),
                            DisplayName = "גבות וריסים",
                            Name = "EyebrowsAndLashes",
                            Type = (short)5,
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("960de054-89d7-4f66-849d-fc129137e0f0"),
                            DisplayName = "פירסינג",
                            Name = "Piercing",
                            Type = (short)6,
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("b733e0c7-a4f0-44e7-92d3-8c5af8799b7c"),
                            DisplayName = "איפור",
                            Name = "Makeup",
                            Type = (short)7,
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("cceddb81-ba91-45fb-b1c5-871ac3bb5c93"),
                            DisplayName = "אימונים אישיים",
                            Name = "PersonalTrainer",
                            Type = (short)8,
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("d3c9378f-df01-465c-a6a1-fbfbadac4880"),
                            DisplayName = "חיות מחמד",
                            Name = "PetServices",
                            Type = (short)9,
                            Url = ""
                        },
                        new
                        {
                            Id = new Guid("f2e123ed-59a1-4893-99e9-7d11a6691186"),
                            DisplayName = "אחר",
                            Name = "Other",
                            Type = (short)10,
                            Url = ""
                        });
                });

            modelBuilder.Entity("Tor.Domain.ClientAggregate.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("Tor.Domain.ClientAggregate.Entities.FavoriteBusiness", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<bool>("MuteNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("ClientId");

                    b.ToTable("FavoriteBusinesses", (string)null);
                });

            modelBuilder.Entity("Tor.Domain.IssuedGiftcardAggregate.IssuedGiftcard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RemainingBalance")
                        .HasColumnType("numeric");

                    b.Property<TimeSpan>("ValidSincePurchase")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("ClientId");

                    b.ToTable("IssuedGiftcards", (string)null);
                });

            modelBuilder.Entity("Tor.Domain.MessageBlastAggregate.Entities.BusinessMessageBlast", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MessageBlastId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("MessageBlastId");

                    b.ToTable("BusinessMessageBlasts", (string)null);
                });

            modelBuilder.Entity("Tor.Domain.MessageBlastAggregate.MessageBlast", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("CanEditBody")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEditTitle")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TemplateBody")
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("TemplateTitle")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MessageBlasts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e82a3ad-7474-4243-9e45-620206852b43"),
                            CanEditBody = true,
                            CanEditTitle = true,
                            CreatedDateTime = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Send a notification to clients who havent booked an appointment in the business for over a month",
                            IsActive = true,
                            Name = "ScheduleAppointmentReminder",
                            TemplateBody = "לא קבעת תור אצלנו כבר הרבה זמן. נשמח לדעת מדוע.",
                            TemplateTitle = "מתגעגעים אלייך!",
                            Type = (short)2,
                            UpdatedDateTime = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Tor.Domain.NotificationAggregate.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Tor.Domain.TierAggregate.Tier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsPaymentsIncluded")
                        .HasColumnType("boolean");

                    b.Property<short>("MaximumStaffMembers")
                        .HasColumnType("smallint");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Tiers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ca11ea5-626a-4f7c-9677-b3e0cfe6f669"),
                            Description = "free tier for new businesses",
                            IsPaymentsIncluded = false,
                            MaximumStaffMembers = (short)3,
                            Type = (short)1
                        },
                        new
                        {
                            Id = new Guid("c6d5d1e0-6081-4382-9d48-f7243b357411"),
                            Description = "premium tier with more features",
                            IsPaymentsIncluded = true,
                            MaximumStaffMembers = (short)5,
                            Type = (short)2
                        });
                });

            modelBuilder.Entity("Tor.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<short>("AppType")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserToken")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Tor.Domain.WaitingListAggregate.WaitingList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("AtDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("AtDate", "ServiceId")
                        .IsUnique();

                    b.ToTable("WaitingLists", (string)null);
                });

            modelBuilder.Entity("BusinessCategory", b =>
                {
                    b.HasOne("Tor.Domain.BusinessAggregate.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tor.Domain.CategoryAggregate.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientNotification", b =>
                {
                    b.HasOne("Tor.Domain.ClientAggregate.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tor.Domain.NotificationAggregate.Notification", null)
                        .WithMany()
                        .HasForeignKey("NotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientWaitingList", b =>
                {
                    b.HasOne("Tor.Domain.ClientAggregate.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tor.Domain.WaitingListAggregate.WaitingList", null)
                        .WithMany()
                        .HasForeignKey("WaitingListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tor.Domain.AppointmentAggregate.Appointment", b =>
                {
                    b.HasOne("Tor.Domain.ClientAggregate.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tor.Domain.BusinessAggregate.Entities.StaffMember", "StaffMember")
                        .WithMany("Appointments")
                        .HasForeignKey("StaffMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Tor.Domain.AppointmentAggregate.ValueObjects.ClientDetails", "ClientDetails", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.OwnsOne("Tor.Domain.AppointmentAggregate.ValueObjects.ServiceDetails", "ServiceDetails", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AppointmentId");

                            b1.HasIndex("Id");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.HasOne("Tor.Domain.BusinessAggregate.Entities.Service", null)
                                .WithMany()
                                .HasForeignKey("Id")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.OwnsOne("Tor.Domain.Common.ValueObjects.AmountDetails", "Amount", b2 =>
                                {
                                    b2.Property<Guid>("ServiceDetailsAppointmentId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("numeric");

                                    b2.Property<string>("Currency")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("ServiceDetailsAppointmentId");

                                    b2.ToTable("Appointments");

                                    b2.WithOwner()
                                        .HasForeignKey("ServiceDetailsAppointmentId");
                                });

                            b1.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.Duration", "Durations", b2 =>
                                {
                                    b2.Property<Guid>("ServiceDetailsAppointmentId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<short>("Order")
                                        .HasColumnType("smallint");

                                    b2.Property<short>("Type")
                                        .HasColumnType("smallint");

                                    b2.Property<int>("ValueInMinutes")
                                        .HasColumnType("integer");

                                    b2.HasKey("ServiceDetailsAppointmentId", "Id");

                                    b2.ToTable("Appointments_Durations");

                                    b2.WithOwner()
                                        .HasForeignKey("ServiceDetailsAppointmentId");
                                });

                            b1.Navigation("Amount")
                                .IsRequired();

                            b1.Navigation("Durations");
                        });

                    b.Navigation("Client");

                    b.Navigation("ClientDetails")
                        .IsRequired();

                    b.Navigation("ServiceDetails")
                        .IsRequired();

                    b.Navigation("StaffMember");
                });

            modelBuilder.Entity("Tor.Domain.BusinessAggregate.Business", b =>
                {
                    b.HasOne("Tor.Domain.TierAggregate.Tier", null)
                        .WithMany("Businesses")
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.Property<short?>("ApartmentNumber")
                                .HasColumnType("smallint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Instructions")
                                .HasColumnType("text");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double?>("Longtitude")
                                .HasColumnType("double precision");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("BusinessId");

                            b1.ToTable("Businesses");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.Image", "Cover", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("BusinessId");

                            b1.ToTable("Businesses");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.CustomWorkingDay", "CustomWorkingDays", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateOnly>("AtDate")
                                .HasColumnType("date");

                            b1.HasKey("BusinessId", "Id");

                            b1.ToTable("Businesses_CustomWorkingDays", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "DailySchedule", b2 =>
                                {
                                    b2.Property<Guid>("CustomWorkingDayBusinessId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("CustomWorkingDayId")
                                        .HasColumnType("integer");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("CustomWorkingDayBusinessId", "CustomWorkingDayId");

                                    b2.ToTable("Businesses_CustomWorkingDays");

                                    b2.WithOwner()
                                        .HasForeignKey("CustomWorkingDayBusinessId", "CustomWorkingDayId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleCustomWorkingDayBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("DailyScheduleCustomWorkingDayId")
                                                .HasColumnType("integer");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b3.Property<int>("Id"));

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleCustomWorkingDayBusinessId", "DailyScheduleCustomWorkingDayId", "Id");

                                            b3.ToTable("Businesses_CustomWorkingDay_RecurringBreaks", (string)null);

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleCustomWorkingDayBusinessId", "DailyScheduleCustomWorkingDayId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleCustomWorkingDayBusinessId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakDailyScheduleCustomWorkingDayId")
                                                        .HasColumnType("integer");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleCustomWorkingDayBusinessId", "RecurringBreakDailyScheduleCustomWorkingDayId", "RecurringBreakId");

                                                    b4.ToTable("Businesses_CustomWorkingDay_RecurringBreaks");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleCustomWorkingDayBusinessId", "RecurringBreakDailyScheduleCustomWorkingDayId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleCustomWorkingDayBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("DailyScheduleCustomWorkingDayId")
                                                .HasColumnType("integer");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleCustomWorkingDayBusinessId", "DailyScheduleCustomWorkingDayId");

                                            b3.ToTable("Businesses_CustomWorkingDays");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleCustomWorkingDayBusinessId", "DailyScheduleCustomWorkingDayId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.Navigation("DailySchedule")
                                .IsRequired();
                        });

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.Image", "Logo", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("BusinessId");

                            b1.ToTable("Businesses");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.OwnsMany("Tor.Domain.Common.ValueObjects.PhoneNumber", "PhoneNumbers", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<string>("Prefix")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.HasKey("BusinessId", "Id");

                            b1.ToTable("Businesses_PhoneNumbers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.OwnsMany("Tor.Domain.Common.ValueObjects.Image", "Portfolio", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("BusinessId", "Id");

                            b1.ToTable("Business_Portfolio", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.WeeklySchedule", "WeeklySchedule", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.HasKey("BusinessId");

                            b1.ToTable("Businesses");

                            b1.ToJson("WeeklySchedule");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Friday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleBusinessId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleBusinessId");

                                    b2.ToTable("Businesses");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleBusinessId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId", "Id");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleBusinessId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");

                                                    b4.ToTable("Businesses");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Monday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleBusinessId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleBusinessId");

                                    b2.ToTable("Businesses");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleBusinessId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId", "Id");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleBusinessId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");

                                                    b4.ToTable("Businesses");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Saturday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleBusinessId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleBusinessId");

                                    b2.ToTable("Businesses");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleBusinessId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId", "Id");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleBusinessId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");

                                                    b4.ToTable("Businesses");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Sunday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleBusinessId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleBusinessId");

                                    b2.ToTable("Businesses");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleBusinessId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId", "Id");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleBusinessId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");

                                                    b4.ToTable("Businesses");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Thursday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleBusinessId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleBusinessId");

                                    b2.ToTable("Businesses");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleBusinessId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId", "Id");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleBusinessId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");

                                                    b4.ToTable("Businesses");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Tuesday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleBusinessId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleBusinessId");

                                    b2.ToTable("Businesses");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleBusinessId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId", "Id");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleBusinessId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");

                                                    b4.ToTable("Businesses");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Wednesday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleBusinessId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleBusinessId");

                                    b2.ToTable("Businesses");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleBusinessId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId", "Id");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleBusinessId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");

                                                    b4.ToTable("Businesses");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleBusinessId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleBusinessId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleBusinessId");

                                            b3.ToTable("Businesses");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleBusinessId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.Navigation("Friday")
                                .IsRequired();

                            b1.Navigation("Monday")
                                .IsRequired();

                            b1.Navigation("Saturday")
                                .IsRequired();

                            b1.Navigation("Sunday")
                                .IsRequired();

                            b1.Navigation("Thursday")
                                .IsRequired();

                            b1.Navigation("Tuesday")
                                .IsRequired();

                            b1.Navigation("Wednesday")
                                .IsRequired();
                        });

                    b.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.Amenity", "Amenities", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<short>("Type")
                                .HasColumnType("smallint");

                            b1.HasKey("BusinessId", "Id");

                            b1.ToTable("Businesses_Amenities", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.BusinessSettings", "Settings", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.Property<int>("BookingMaximumTimeInAdvanceInDays")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(14);

                            b1.Property<int>("BookingMinimumTimeInAdvanceInMinutes")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(180);

                            b1.Property<int>("CancelAppointmentMinimumTimeInMinutes")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(180);

                            b1.Property<int>("RescheduleAppointmentMinimumTimeInMinutes")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(180);

                            b1.HasKey("BusinessId");

                            b1.ToTable("Businesses");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.Location", "Locations", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<short>("Type")
                                .HasColumnType("smallint");

                            b1.HasKey("BusinessId", "Id");

                            b1.ToTable("Businesses_Locations", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.Note", "Notes", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("BusinessId", "Id");

                            b1.ToTable("Businesses_Notes", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.PaymentDetails", "PaymentDetails", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.Property<string>("BankNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("BeneficiaryName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("BranchCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("BusinessId");

                            b1.ToTable("Businesses");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.Rule", "Rules", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("BusinessId", "Id");

                            b1.ToTable("Businesses_Rules", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.SocialMedia", "SocialMedias", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<short>("Type")
                                .HasColumnType("smallint");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("BusinessId", "Id");

                            b1.ToTable("Businesses_SocialMedias", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BusinessId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Amenities");

                    b.Navigation("Cover");

                    b.Navigation("CustomWorkingDays");

                    b.Navigation("Locations");

                    b.Navigation("Logo");

                    b.Navigation("Notes");

                    b.Navigation("PaymentDetails");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("Portfolio");

                    b.Navigation("Rules");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("SocialMedias");

                    b.Navigation("WeeklySchedule")
                        .IsRequired();
                });

            modelBuilder.Entity("Tor.Domain.BusinessAggregate.Entities.BusinessClient", b =>
                {
                    b.HasOne("Tor.Domain.BusinessAggregate.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tor.Domain.ClientAggregate.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tor.Domain.BusinessAggregate.Entities.GiftcardPreset", b =>
                {
                    b.HasOne("Tor.Domain.BusinessAggregate.Business", null)
                        .WithMany("GiftcardPresets")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.AmountDetails", "Price", b1 =>
                        {
                            b1.Property<Guid>("GiftcardPresetId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("GiftcardPresetId");

                            b1.ToTable("GiftcardPresets");

                            b1.WithOwner()
                                .HasForeignKey("GiftcardPresetId");
                        });

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.AmountDetails", "Value", b1 =>
                        {
                            b1.Property<Guid>("GiftcardPresetId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("GiftcardPresetId");

                            b1.ToTable("GiftcardPresets");

                            b1.WithOwner()
                                .HasForeignKey("GiftcardPresetId");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("Tor.Domain.BusinessAggregate.Entities.Service", b =>
                {
                    b.HasOne("Tor.Domain.BusinessAggregate.Entities.StaffMember", "StaffMember")
                        .WithMany("Services")
                        .HasForeignKey("StaffMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.AmountDetails", "Amount", b1 =>
                        {
                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ServiceId");

                            b1.ToTable("Services");

                            b1.WithOwner()
                                .HasForeignKey("ServiceId");
                        });

                    b.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.Duration", "Durations", b1 =>
                        {
                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<short>("Order")
                                .HasColumnType("smallint");

                            b1.Property<short>("Type")
                                .HasColumnType("smallint");

                            b1.Property<int>("ValueInMinutes")
                                .HasColumnType("integer");

                            b1.HasKey("ServiceId", "Id");

                            b1.ToTable("Services_Durations", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ServiceId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Durations");

                    b.Navigation("StaffMember");
                });

            modelBuilder.Entity("Tor.Domain.BusinessAggregate.Entities.StaffMember", b =>
                {
                    b.HasOne("Tor.Domain.BusinessAggregate.Business", "Business")
                        .WithMany("StaffMembers")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tor.Domain.UserAggregate.User", "User")
                        .WithOne()
                        .HasForeignKey("Tor.Domain.BusinessAggregate.Entities.StaffMember", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("StaffMemberId")
                                .HasColumnType("uuid");

                            b1.Property<short?>("ApartmentNumber")
                                .HasColumnType("smallint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Instructions")
                                .HasColumnType("text");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double?>("Longtitude")
                                .HasColumnType("double precision");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("StaffMemberId");

                            b1.ToTable("StaffMembers");

                            b1.WithOwner()
                                .HasForeignKey("StaffMemberId");
                        });

                    b.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.CustomWorkingDay", "CustomWorkingDays", b1 =>
                        {
                            b1.Property<Guid>("StaffMemberId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateOnly>("AtDate")
                                .HasColumnType("date");

                            b1.HasKey("StaffMemberId", "Id");

                            b1.ToTable("StaffMembers_CustomWorkingDays", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("StaffMemberId");

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "DailySchedule", b2 =>
                                {
                                    b2.Property<Guid>("CustomWorkingDayStaffMemberId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("CustomWorkingDayId")
                                        .HasColumnType("integer");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("CustomWorkingDayStaffMemberId", "CustomWorkingDayId");

                                    b2.ToTable("StaffMembers_CustomWorkingDays");

                                    b2.WithOwner()
                                        .HasForeignKey("CustomWorkingDayStaffMemberId", "CustomWorkingDayId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleCustomWorkingDayStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("DailyScheduleCustomWorkingDayId")
                                                .HasColumnType("integer");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b3.Property<int>("Id"));

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleCustomWorkingDayStaffMemberId", "DailyScheduleCustomWorkingDayId", "Id");

                                            b3.ToTable("StaffMembers_CustomWorkingDay_RecurringBreaks", (string)null);

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleCustomWorkingDayStaffMemberId", "DailyScheduleCustomWorkingDayId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleCustomWorkingDayStaffMemberId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakDailyScheduleCustomWorkingDayId")
                                                        .HasColumnType("integer");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleCustomWorkingDayStaffMemberId", "RecurringBreakDailyScheduleCustomWorkingDayId", "RecurringBreakId");

                                                    b4.ToTable("StaffMembers_CustomWorkingDay_RecurringBreaks");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleCustomWorkingDayStaffMemberId", "RecurringBreakDailyScheduleCustomWorkingDayId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleCustomWorkingDayStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("DailyScheduleCustomWorkingDayId")
                                                .HasColumnType("integer");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleCustomWorkingDayStaffMemberId", "DailyScheduleCustomWorkingDayId");

                                            b3.ToTable("StaffMembers_CustomWorkingDays");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleCustomWorkingDayStaffMemberId", "DailyScheduleCustomWorkingDayId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.Navigation("DailySchedule")
                                .IsRequired();
                        });

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("StaffMemberId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Prefix")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("StaffMemberId");

                            b1.ToTable("StaffMembers");

                            b1.WithOwner()
                                .HasForeignKey("StaffMemberId");
                        });

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.Image", "ProfileImage", b1 =>
                        {
                            b1.Property<Guid>("StaffMemberId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("StaffMemberId");

                            b1.ToTable("StaffMembers");

                            b1.WithOwner()
                                .HasForeignKey("StaffMemberId");
                        });

                    b.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.WeeklySchedule", "WeeklySchedule", b1 =>
                        {
                            b1.Property<Guid>("StaffMemberId")
                                .HasColumnType("uuid");

                            b1.HasKey("StaffMemberId");

                            b1.ToTable("StaffMembers");

                            b1.ToJson("WeeklySchedule");

                            b1.WithOwner()
                                .HasForeignKey("StaffMemberId");

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Friday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleStaffMemberId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleStaffMemberId");

                                    b2.ToTable("StaffMembers");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleStaffMemberId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId", "Id");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");

                                                    b4.ToTable("StaffMembers");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Monday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleStaffMemberId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleStaffMemberId");

                                    b2.ToTable("StaffMembers");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleStaffMemberId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId", "Id");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");

                                                    b4.ToTable("StaffMembers");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Saturday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleStaffMemberId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleStaffMemberId");

                                    b2.ToTable("StaffMembers");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleStaffMemberId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId", "Id");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");

                                                    b4.ToTable("StaffMembers");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Sunday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleStaffMemberId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleStaffMemberId");

                                    b2.ToTable("StaffMembers");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleStaffMemberId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId", "Id");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");

                                                    b4.ToTable("StaffMembers");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Thursday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleStaffMemberId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleStaffMemberId");

                                    b2.ToTable("StaffMembers");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleStaffMemberId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId", "Id");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");

                                                    b4.ToTable("StaffMembers");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Tuesday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleStaffMemberId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleStaffMemberId");

                                    b2.ToTable("StaffMembers");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleStaffMemberId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId", "Id");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");

                                                    b4.ToTable("StaffMembers");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.OwnsOne("Tor.Domain.BusinessAggregate.ValueObjects.DailySchedule", "Wednesday", b2 =>
                                {
                                    b2.Property<Guid>("WeeklyScheduleStaffMemberId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsWorkingDay")
                                        .HasColumnType("boolean");

                                    b2.HasKey("WeeklyScheduleStaffMemberId");

                                    b2.ToTable("StaffMembers");

                                    b2.WithOwner()
                                        .HasForeignKey("WeeklyScheduleStaffMemberId");

                                    b2.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.RecurringBreak", "RecurringBreaks", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<short>("Interval")
                                                .HasColumnType("smallint");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId", "Id");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b4 =>
                                                {
                                                    b4.Property<Guid>("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("RecurringBreakId")
                                                        .HasColumnType("integer");

                                                    b4.Property<TimeSpan>("EndTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.Property<TimeSpan>("StartTime")
                                                        .HasColumnType("time without time zone");

                                                    b4.HasKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");

                                                    b4.ToTable("StaffMembers");

                                                    b4.WithOwner()
                                                        .HasForeignKey("RecurringBreakDailyScheduleWeeklyScheduleStaffMemberId", "RecurringBreakId");
                                                });

                                            b3.Navigation("TimeRange")
                                                .IsRequired();
                                        });

                                    b2.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b3 =>
                                        {
                                            b3.Property<Guid>("DailyScheduleWeeklyScheduleStaffMemberId")
                                                .HasColumnType("uuid");

                                            b3.Property<TimeSpan>("EndTime")
                                                .HasColumnType("time without time zone");

                                            b3.Property<TimeSpan>("StartTime")
                                                .HasColumnType("time without time zone");

                                            b3.HasKey("DailyScheduleWeeklyScheduleStaffMemberId");

                                            b3.ToTable("StaffMembers");

                                            b3.WithOwner()
                                                .HasForeignKey("DailyScheduleWeeklyScheduleStaffMemberId");
                                        });

                                    b2.Navigation("RecurringBreaks");

                                    b2.Navigation("TimeRange");
                                });

                            b1.Navigation("Friday")
                                .IsRequired();

                            b1.Navigation("Monday")
                                .IsRequired();

                            b1.Navigation("Saturday")
                                .IsRequired();

                            b1.Navigation("Sunday")
                                .IsRequired();

                            b1.Navigation("Thursday")
                                .IsRequired();

                            b1.Navigation("Tuesday")
                                .IsRequired();

                            b1.Navigation("Wednesday")
                                .IsRequired();
                        });

                    b.OwnsMany("Tor.Domain.BusinessAggregate.ValueObjects.ReservedTimeSlot", "ReservedTimeSlots", b1 =>
                        {
                            b1.Property<Guid>("StaffMemberId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateOnly>("AtDate")
                                .HasColumnType("date");

                            b1.Property<string>("Reason")
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)");

                            b1.HasKey("StaffMemberId", "Id");

                            b1.ToTable("StaffMembers_ReservedTimeSlots", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("StaffMemberId");

                            b1.OwnsOne("Tor.Domain.Common.ValueObjects.TimeRange", "TimeRange", b2 =>
                                {
                                    b2.Property<Guid>("ReservedTimeSlotStaffMemberId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("ReservedTimeSlotId")
                                        .HasColumnType("integer");

                                    b2.Property<TimeSpan>("EndTime")
                                        .HasColumnType("time without time zone");

                                    b2.Property<TimeSpan>("StartTime")
                                        .HasColumnType("time without time zone");

                                    b2.HasKey("ReservedTimeSlotStaffMemberId", "ReservedTimeSlotId");

                                    b2.ToTable("StaffMembers_ReservedTimeSlots");

                                    b2.WithOwner()
                                        .HasForeignKey("ReservedTimeSlotStaffMemberId", "ReservedTimeSlotId");
                                });

                            b1.Navigation("TimeRange")
                                .IsRequired();
                        });

                    b.Navigation("Address");

                    b.Navigation("Business");

                    b.Navigation("CustomWorkingDays");

                    b.Navigation("PhoneNumber")
                        .IsRequired();

                    b.Navigation("ProfileImage");

                    b.Navigation("ReservedTimeSlots");

                    b.Navigation("User");

                    b.Navigation("WeeklySchedule")
                        .IsRequired();
                });

            modelBuilder.Entity("Tor.Domain.ClientAggregate.Client", b =>
                {
                    b.HasOne("Tor.Domain.UserAggregate.User", "User")
                        .WithOne()
                        .HasForeignKey("Tor.Domain.ClientAggregate.Client", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<short?>("ApartmentNumber")
                                .HasColumnType("smallint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Instructions")
                                .HasColumnType("text");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double?>("Longtitude")
                                .HasColumnType("double precision");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Prefix")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.Image", "ProfileImage", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("Address");

                    b.Navigation("PhoneNumber")
                        .IsRequired();

                    b.Navigation("ProfileImage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tor.Domain.ClientAggregate.Entities.FavoriteBusiness", b =>
                {
                    b.HasOne("Tor.Domain.BusinessAggregate.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tor.Domain.ClientAggregate.Client", "Client")
                        .WithMany("FavoriteBusinesses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Tor.Domain.IssuedGiftcardAggregate.IssuedGiftcard", b =>
                {
                    b.HasOne("Tor.Domain.BusinessAggregate.Business", null)
                        .WithMany("IssuedGiftcards")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tor.Domain.ClientAggregate.Client", null)
                        .WithMany("IssuedGiftcards")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.AmountDetails", "Price", b1 =>
                        {
                            b1.Property<Guid>("IssuedGiftcardId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("IssuedGiftcardId");

                            b1.ToTable("IssuedGiftcards");

                            b1.WithOwner()
                                .HasForeignKey("IssuedGiftcardId");
                        });

                    b.OwnsOne("Tor.Domain.Common.ValueObjects.AmountDetails", "Value", b1 =>
                        {
                            b1.Property<Guid>("IssuedGiftcardId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("IssuedGiftcardId");

                            b1.ToTable("IssuedGiftcards");

                            b1.WithOwner()
                                .HasForeignKey("IssuedGiftcardId");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("Tor.Domain.MessageBlastAggregate.Entities.BusinessMessageBlast", b =>
                {
                    b.HasOne("Tor.Domain.BusinessAggregate.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tor.Domain.MessageBlastAggregate.MessageBlast", "MessageBlast")
                        .WithMany()
                        .HasForeignKey("MessageBlastId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("MessageBlast");
                });

            modelBuilder.Entity("Tor.Domain.NotificationAggregate.Notification", b =>
                {
                    b.HasOne("Tor.Domain.BusinessAggregate.Business", null)
                        .WithMany("Notifications")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Tor.Domain.UserAggregate.User", b =>
                {
                    b.OwnsOne("Tor.Domain.Common.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Prefix")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("Tor.Domain.UserAggregate.ValueObjects.Device", "Devices", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("User_Devices", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Devices");

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("Tor.Domain.WaitingListAggregate.WaitingList", b =>
                {
                    b.HasOne("Tor.Domain.BusinessAggregate.Entities.Service", "Service")
                        .WithMany("WaitingLists")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Tor.Domain.BusinessAggregate.Business", b =>
                {
                    b.Navigation("GiftcardPresets");

                    b.Navigation("IssuedGiftcards");

                    b.Navigation("Notifications");

                    b.Navigation("StaffMembers");
                });

            modelBuilder.Entity("Tor.Domain.BusinessAggregate.Entities.Service", b =>
                {
                    b.Navigation("WaitingLists");
                });

            modelBuilder.Entity("Tor.Domain.BusinessAggregate.Entities.StaffMember", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Tor.Domain.ClientAggregate.Client", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("FavoriteBusinesses");

                    b.Navigation("IssuedGiftcards");
                });

            modelBuilder.Entity("Tor.Domain.TierAggregate.Tier", b =>
                {
                    b.Navigation("Businesses");
                });
#pragma warning restore 612, 618
        }
    }
}
